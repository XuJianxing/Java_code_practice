package foroffer.leetcode;

/**
 * 88. 合并两个有序数组
 *
 * 给你两个按 非递减顺序 排列的整数数组nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。
 * 请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。
 *
 * 注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。
 * 为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。
 */
public class lc88_merge {
    /**
     * 逆向双指针，因为实际上你是要从后往前填充数据
     * (数组和链表合并思路的根本不同在于链表可以直接链接到中间位置，数组不能直接往中间塞数据，
     * 所以从前往后的线性思路行不通，而且直接交换会破坏有序性。从前往后一定要用额外空间才行)
     */
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = m + n - 1;  // 要填入的地方
        m--;
        n--;
        // 只需要考虑n填没填完就行了，因为只要n填完了，其余的前面的m都是有序的
        while (n >= 0){
            // 如果m一直比n大的话，就一直用m里的数填
            while (m >= 0 && nums1[m] > nums2[n]){
                nums1[i] = nums1[m];
                m--;
                i--;
            }
            nums1[i] = nums2[n];
            i--;
            n--;
        }
    }

}
