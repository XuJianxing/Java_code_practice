package com.multithread;

/** 线程的5个状态：
 * 新生   就绪  运行  阻塞  死亡
 *
 * 1. 成为新生状态： new 一个线程的时候
 *
 * 2. 变成就绪状态： 1）调用Thread.start()方法  2）阻塞解除
 *   3）调用礼让Thread.yield()方法直接运行变成就绪
 *   4）JVM将CPU资源切换到其他线程
 *
 * 3. 运行：run()方法
 *
 * 4. 阻塞 暂停一个线程的执行以等待某条件发生：
 *   1）执行Thread.sleep(int)方法，线程休眠进入阻塞状态，结束后变成就绪态（sleep不释放锁，wait释放）
 *   2）执行wait()方法，使当前线程进入阻塞状态，使用notify()方法唤醒进入就绪态
 *   3）执行某个操作时进入阻塞，如IO流操作（read() write())
 *   4）join()线程联合：当某个线程等待另一个线程执行结束后才能继续执行时，使用join()方法
 *
 *  5. 死亡：正常执行完成（设置标志位）、执行stop()或destroy()（已被废弃）
 */
public class Summary {
}
/*
                     （失去执行权）   （获得执行权）  run()方法结束
新生状态 -> start() -> 就绪状态   <-->  运行状态   ->  死亡状态
                         ^|^           /    |     \
                          |          /      |      \
                          | synchronized    |       \
                    锁可用|      /          |wait()  \
                          |    /            |         \
                          | ,/,            ,|,        ,\,
                       同步阻塞    <-    等待阻塞     其他阻塞 -> 就绪态：sleep()休眠时间到、
                                notify()                                  join()联合线程执行完毕、
                                                                          IO流阻塞结束
 */